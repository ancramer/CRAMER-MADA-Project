---
title: "Analysis"
---

To start, I'll load packages. As I need packages along the way, I'll return here and add them.
```{r}
library(tidyverse)
library(survey)
library(tableone)
library(gt)
library(here)
```

Now, loading data using the here package.
```{r}
here() #set working directory
data <- readRDS(here("data","processed-data", "data3.rds"))
data <- labelled::remove_val_labels(data) #removes labels from haven package which cause problems
```

As a reminder, we are going to use the following variables, and stratify by covid test result.
EXERCISE: Whether or not individual met guidelines by Am Heart Assoc met for aerobics, strength, or both, 0 if not met, 1 if any were met
SLEEP: If individual reported getting the proper amount of sleep for their resspective age group
DEPRESSED: If individual felt depressed weekly+ or not
TROUBLE_SLEEPING: If individual reported having trouble sleeping over past several days, more than half days, or nearly every day or not at all
SOCIAL: If person felt like they were reciveing less social support or not
COVID: If they've tested positive for covid or not

We create estimates and CIs using complex survey design variables
```{r}
#list variables
varstable1 = c("EXERCISE", "SLEEP", "DEPRESSED", "TROUBLE_SLEEPING", 
             "SOCIAL", "COVID")

#list categories
cat_vartab1 = c("EXERCISE", "SLEEP", "DEPRESSED", "TROUBLE_SLEEPING", 
             "SOCIAL", "COVID")

survey = svydesign(
  ids = ~PSU, 
  strata = ~STRATA, 
  weights = ~SAMPWEIGHT, 
  nest = TRUE, 
  data = data)

exercise <- svyby(~as.factor(EXERCISE), ~COVID, survey, svymean, vartype = "ci", na.rm = TRUE)
sleep <- svyby(~as.factor(SLEEP), ~COVID, survey, svymean, vartype = "ci", na.rm = TRUE)
depressed <- svyby(~as.factor(DEPRESSED), ~COVID, survey, svymean, vartype = "ci", na.rm = TRUE)
trouble_sleeping <- svyby(~as.factor(TROUBLE_SLEEPING), ~COVID, survey, svymean, vartype = "ci", na.rm = TRUE)
social <- svyby(~as.factor(SOCIAL), ~COVID, survey, svymean, vartype = "ci", na.rm = TRUE)
str(exercise)
```



Let's rearrange these exercise numbers into a table. I used ChatGPT and Claude to help with making the table. 
```{r}
# Convert the svyby object to a data frame (if not already)
exercise_df <- as.data.frame(exercise)

# Clean up column names to make them more readable
colnames(exercise_df) <- c("COVID", "EXERCISE_0", "EXERCISE_1", "CI_L_EXERCISE_0", "CI_L_EXERCISE_1", "CI_U_EXERCISE_0", "CI_U_EXERCISE_1")

# Use a different approach to reshape the data
exercise_long <- exercise_df %>%
  # First, let's gather all columns except COVID
  pivot_longer(
    cols = -COVID,
    names_to = "variable",
    values_to = "value"
  ) %>%
  # Now separate the variable column into type and exercise level
  mutate(
    Type = case_when(
      grepl("^EXERCISE", variable) ~ "Mean",
      grepl("^CI_L", variable) ~ "L",
      grepl("^CI_U", variable) ~ "U"
    ),
    Exercise = case_when(
      grepl("_0$", variable) ~ "0",
      grepl("_1$", variable) ~ "1"
    )
  ) %>%
  # Now pivot wider to get the structure we want
  pivot_wider(
    id_cols = c(COVID, Exercise),
    names_from = Type,
    values_from = value
  )

# Combine the CI values into a single column
exercise_with_ci <- exercise_long %>%
  mutate(
    CI = paste0("(", round(L, 2), ", ", round(U, 2), ")")
  ) %>%
  select(COVID, Exercise, Mean, CI)

# Now create the final table format
exercise_final <- exercise_with_ci %>%
  # Convert COVID to character to ensure it works as a column header
  mutate(COVID = as.character(COVID)) %>%
  # Pivot to get COVID status as columns
  pivot_wider(
    id_cols = Exercise,
    names_from = COVID,
    values_from = c("Mean", "CI"),
    names_glue = "{.value}_{COVID}"
  )

# Create the table using gt
exercise_table <- exercise_final %>%
  gt() %>%
  tab_header(
    title = "Exercise Data by COVID Status"
  ) %>%
  cols_label(
    Exercise = "Exercise Level",
    Mean_0 = "Mean",
    Mean_1 = "Mean",
    CI_0 = "95% CI",
    CI_1 = "95% CI"
  ) %>%
  tab_spanner(
    label = "COVID Negative (0)",
    columns = c(Mean_0, CI_0)
  ) %>%
  tab_spanner(
    label = "COVID Positive (1)",
    columns = c(Mean_1, CI_1)
  ) %>%
  # Add formatting for the mean values
  fmt_number(
    columns = starts_with("Mean"),
    decimals = 2
  ) %>%
  # Add some style
  tab_style(
    style = cell_fill(color = "#f5f5f5"),
    locations = cells_body(rows = Exercise == "0")
  ) %>%
  # Add a footnote
  tab_footnote(
    footnote = "Exercise Level: 0 = No regular exercise, 1 = Meets requirements for regular exercise according to American Heart Association",
    locations = cells_column_labels(columns = Exercise)
  ) %>%
  # Add meaningful row labels
  text_transform(
    locations = cells_body(columns = Exercise),
    fn = function(x) {
      ifelse(x == "0", "No Regular Exercise", "Regular Exercise")
    }
  )

# Print the table
exercise_table
```


Next, we will add the sleep variable. I used ChatGPT for this.
```{r}
# Convert the svyby object to a data frame (if not already)
sleep_df <- as.data.frame(sleep)  # Assuming 'sleep' is the dataset

# Clean up column names to make them more readable
colnames(sleep_df) <- c("COVID", "SLEEP_0", "SLEEP_1", "CI_L_SLEEP_0", "CI_L_SLEEP_1", "CI_U_SLEEP_0", "CI_U_SLEEP_1")

# Use a different approach to reshape the data
sleep_long <- sleep_df %>%
  # First, let's gather all columns except COVID
  pivot_longer(
    cols = -COVID,
    names_to = "variable",
    values_to = "value"
  ) %>%
  # Now separate the variable column into type and sleep level
  mutate(
    Type = case_when(
      grepl("^SLEEP", variable) ~ "Mean",
      grepl("^CI_L", variable) ~ "L",
      grepl("^CI_U", variable) ~ "U"
    ),
    Sleep = case_when(
      grepl("_0$", variable) ~ "0",
      grepl("_1$", variable) ~ "1"
    )
  ) %>%
  # Now pivot wider to get the structure we want
  pivot_wider(
    id_cols = c(COVID, Sleep),
    names_from = Type,
    values_from = value
  )

# Combine the CI values into a single column
sleep_with_ci <- sleep_long %>%
  mutate(
    CI = paste0("(", round(L, 2), ", ", round(U, 2), ")")
  ) %>%
  select(COVID, Sleep, Mean, CI)

# Now create the final table format
sleep_final <- sleep_with_ci %>%
  # Convert COVID to character to ensure it works as a column header
  mutate(COVID = as.character(COVID)) %>%
  # Pivot to get COVID status as columns
  pivot_wider(
    id_cols = Sleep,
    names_from = COVID,
    values_from = c("Mean", "CI"),
    names_glue = "{.value}_{COVID}"
  )

# Create the table using gt
sleep_table <- sleep_final %>%
  gt() %>%
  tab_header(
    title = "Sleep Data by COVID Status"
  ) %>%
  cols_label(
    Sleep = "Sleep Level",
    Mean_0 = "Mean",
    Mean_1 = "Mean",
    CI_0 = "95% CI",
    CI_1 = "95% CI"
  ) %>%
  tab_spanner(
    label = "COVID Negative (0)",
    columns = c(Mean_0, CI_0)
  ) %>%
  tab_spanner(
    label = "COVID Positive (1)",
    columns = c(Mean_1, CI_1)
  ) %>%
  # Add formatting for the mean values
  fmt_number(
    columns = starts_with("Mean"),
    decimals = 2
  ) %>%
  # Add some style
  tab_style(
    style = cell_fill(color = "#f5f5f5"),
    locations = cells_body(rows = Sleep == "0")
  ) %>%
  # Add a footnote
  tab_footnote(
    footnote = "Sleep Level: 0 = Less than recommended sleep, 1 = Met recommendations for sleep by age groups according to NIH",
    locations = cells_column_labels(columns = Sleep)
  ) %>%
  # Add meaningful row labels
  text_transform(
    locations = cells_body(columns = Sleep),
    fn = function(x) {
      ifelse(x == "0", "Not enough sleep", "Enough sleep")
    }
  )

# Print the table
sleep_table

#################################################################################

# Extract the data from the gt tables
exercise_table_df <- as.data.frame(exercise_table)
sleep_table_df <- as.data.frame(sleep_table)

# Ensure that the column names are the same across both tables
colnames(sleep_table_df) <- colnames(exercise_table_df)

# Combine the tables row by row
combined_df <- bind_rows(exercise_table_df, sleep_table_df)

# Convert the combined data frame back to a gt table
combined_table <- combined_df %>%
  gt() %>%
  tab_header(
    title = "Combined Exercise and Sleep Data by COVID Status"
  )

# Print the combined gt table
combined_table
```

Create the same tables with depressed, trouble_sleeping, and social. This was completed in BBEdit.
```{r}
#########################################################################################
# depressed variable

# Convert the svyby object to a data frame (if not already)
depressed_df <- as.data.frame(depressed)

# Clean up column names to make them more readable
colnames(depressed_df) <- c("COVID", "depressed_0", "depressed_1", "CI_L_depressed_0", "CI_L_depressed_1", "CI_U_depressed_0", "CI_U_depressed_1")

# Use a different approach to reshape the data
depressed_long <- depressed_df %>%
  # First, let's gather all columns except COVID
  pivot_longer(
    cols = -COVID,
    names_to = "variable",
    values_to = "value"
  ) %>%
  # Now separate the variable column into type and depressed level
  mutate(
    Type = case_when(
      grepl("^depressed", variable) ~ "Mean",
      grepl("^CI_L", variable) ~ "L",
      grepl("^CI_U", variable) ~ "U"
    ),
    depressed = case_when(
      grepl("_0$", variable) ~ "0",
      grepl("_1$", variable) ~ "1"
    )
  ) %>%
  # Now pivot wider to get the structure we want
  pivot_wider(
    id_cols = c(COVID, depressed),
    names_from = Type,
    values_from = value
  )

# Combine the CI values into a single column
depressed_with_ci <- depressed_long %>%
  mutate(
    CI = paste0("(", round(L, 2), ", ", round(U, 2), ")")
  ) %>%
  select(COVID, depressed, Mean, CI)

# Now create the final table format
depressed_final <- depressed_with_ci %>%
  # Convert COVID to character to ensure it works as a column header
  mutate(COVID = as.character(COVID)) %>%
  # Pivot to get COVID status as columns
  pivot_wider(
    id_cols = depressed,
    names_from = COVID,
    values_from = c("Mean", "CI"),
    names_glue = "{.value}_{COVID}"
  )

# Create the table using gt
depressed_table <- depressed_final %>%
  gt() %>%
  tab_header(
    title = "depressed Data by COVID Status"
  ) %>%
  cols_label(
    depressed = "depressed Level",
    Mean_0 = "Mean",
    Mean_1 = "Mean",
    CI_0 = "95% CI",
    CI_1 = "95% CI"
  ) %>%
  tab_spanner(
    label = "COVID Negative (0)",
    columns = c(Mean_0, CI_0)
  ) %>%
  tab_spanner(
    label = "COVID Positive (1)",
    columns = c(Mean_1, CI_1)
  ) %>%
  # Add formatting for the mean values
  fmt_number(
    columns = starts_with("Mean"),
    decimals = 2
  ) %>%
  # Add some style
  tab_style(
    style = cell_fill(color = "#f5f5f5"),
    locations = cells_body(rows = depressed == "0")
  ) %>%
  # Add a footnote
  tab_footnote(
    footnote = "Depressed level: 0 = Feeling depressed less than weekly, 1 = Feeling depressed weekly or more",
    locations = cells_column_labels(columns = depressed)
  ) %>%
  # Add meaningful row labels
  text_transform(
    locations = cells_body(columns = depressed),
    fn = function(x) {
      ifelse(x == "0", "Not regularly depressed", "Frequent depressed feeling")
    }
  )

# Print the table
depressed_table

#########################################################################################
# trouble_sleeping variable

# Convert the svyby object to a data frame (if not already)
trouble_sleeping_df <- as.data.frame(trouble_sleeping)

# Clean up column names to make them more readable
colnames(trouble_sleeping_df) <- c("COVID", "trouble_sleeping_0", "trouble_sleeping_1", "CI_L_trouble_sleeping_0", "CI_L_trouble_sleeping_1", "CI_U_trouble_sleeping_0", "CI_U_trouble_sleeping_1")

# Use a different approach to reshape the data
trouble_sleeping_long <- trouble_sleeping_df %>%
  # First, let's gather all columns except COVID
  pivot_longer(
    cols = -COVID,
    names_to = "variable",
    values_to = "value"
  ) %>%
  # Now separate the variable column into type and trouble_sleeping level
  mutate(
    Type = case_when(
      grepl("^trouble_sleeping", variable) ~ "Mean",
      grepl("^CI_L", variable) ~ "L",
      grepl("^CI_U", variable) ~ "U"
    ),
    trouble_sleeping = case_when(
      grepl("_0$", variable) ~ "0",
      grepl("_1$", variable) ~ "1"
    )
  ) %>%
  # Now pivot wider to get the structure we want
  pivot_wider(
    id_cols = c(COVID, trouble_sleeping),
    names_from = Type,
    values_from = value
  )

# Combine the CI values into a single column
trouble_sleeping_with_ci <- trouble_sleeping_long %>%
  mutate(
    CI = paste0("(", round(L, 2), ", ", round(U, 2), ")")
  ) %>%
  select(COVID, trouble_sleeping, Mean, CI)

# Now create the final table format
trouble_sleeping_final <- trouble_sleeping_with_ci %>%
  # Convert COVID to character to ensure it works as a column header
  mutate(COVID = as.character(COVID)) %>%
  # Pivot to get COVID status as columns
  pivot_wider(
    id_cols = trouble_sleeping,
    names_from = COVID,
    values_from = c("Mean", "CI"),
    names_glue = "{.value}_{COVID}"
  )

# Create the table using gt
trouble_sleeping_table <- trouble_sleeping_final %>%
  gt() %>%
  tab_header(
    title = "trouble_sleeping Data by COVID Status"
  ) %>%
  cols_label(
    trouble_sleeping = "trouble_sleeping Level",
    Mean_0 = "Mean",
    Mean_1 = "Mean",
    CI_0 = "95% CI",
    CI_1 = "95% CI"
  ) %>%
  tab_spanner(
    label = "COVID Negative (0)",
    columns = c(Mean_0, CI_0)
  ) %>%
  tab_spanner(
    label = "COVID Positive (1)",
    columns = c(Mean_1, CI_1)
  ) %>%
  # Add formatting for the mean values
  fmt_number(
    columns = starts_with("Mean"),
    decimals = 2
  ) %>%
  # Add some style
  tab_style(
    style = cell_fill(color = "#f5f5f5"),
    locations = cells_body(rows = trouble_sleeping == "0")
  ) %>%
  # Add a footnote
  tab_footnote(
    footnote = "trouble_sleeping level: 0 = No trouble sleeping, 1 = Reported trouble sleeping",
    locations = cells_column_labels(columns = trouble_sleeping)
  ) %>%
  # Add meaningful row labels
  text_transform(
    locations = cells_body(columns = trouble_sleeping),
    fn = function(x) {
      ifelse(x == "0", "No reported trouble sleeping", "Regular trouble sleeping")
    }
  )

# Print the table
trouble_sleeping_table

#########################################################################################
# social variable

# Convert the svyby object to a data frame (if not already)
social_df <- as.data.frame(social)

# Clean up column names to make them more readable
colnames(social_df) <- c("COVID", "social_0", "social_1", "CI_L_social_0", "CI_L_social_1", "CI_U_social_0", "CI_U_social_1")

# Use a different approach to reshape the data
social_long <- social_df %>%
  # First, let's gather all columns except COVID
  pivot_longer(
    cols = -COVID,
    names_to = "variable",
    values_to = "value"
  ) %>%
  # Now separate the variable column into type and social level
  mutate(
    Type = case_when(
      grepl("^social", variable) ~ "Mean",
      grepl("^CI_L", variable) ~ "L",
      grepl("^CI_U", variable) ~ "U"
    ),
    social = case_when(
      grepl("_0$", variable) ~ "0",
      grepl("_1$", variable) ~ "1"
    )
  ) %>%
  # Now pivot wider to get the structure we want
  pivot_wider(
    id_cols = c(COVID, social),
    names_from = Type,
    values_from = value
  )

# Combine the CI values into a single column
social_with_ci <- social_long %>%
  mutate(
    CI = paste0("(", round(L, 2), ", ", round(U, 2), ")")
  ) %>%
  select(COVID, social, Mean, CI)

# Now create the final table format
social_final <- social_with_ci %>%
  # Convert COVID to character to ensure it works as a column header
  mutate(COVID = as.character(COVID)) %>%
  # Pivot to get COVID status as columns
  pivot_wider(
    id_cols = social,
    names_from = COVID,
    values_from = c("Mean", "CI"),
    names_glue = "{.value}_{COVID}"
  )

# Create the table using gt
social_table <- social_final %>%
  gt() %>%
  tab_header(
    title = "social Data by COVID Status"
  ) %>%
  cols_label(
    social = "social Level",
    Mean_0 = "Mean",
    Mean_1 = "Mean",
    CI_0 = "95% CI",
    CI_1 = "95% CI"
  ) %>%
  tab_spanner(
    label = "COVID Negative (0)",
    columns = c(Mean_0, CI_0)
  ) %>%
  tab_spanner(
    label = "COVID Positive (1)",
    columns = c(Mean_1, CI_1)
  ) %>%
  # Add formatting for the mean values
  fmt_number(
    columns = starts_with("Mean"),
    decimals = 2
  ) %>%
  # Add some style
  tab_style(
    style = cell_fill(color = "#f5f5f5"),
    locations = cells_body(rows = social == "0")
  ) %>%
  # Add a footnote
  tab_footnote(
    footnote = "social Level: 0 = Regular social support, 1 = Less social support",
    locations = cells_column_labels(columns = social)
  ) %>%
  # Add meaningful row labels
  text_transform(
    locations = cells_body(columns = social),
    fn = function(x) {
      ifelse(x == "0", "Regular social support", "Less social support")
    }
  )

# Print the table
social_table



```

Now, we will create the combined table of exercise, sleep, depressed, trouble_sleeping, and social. ChatGPT helped with many tweaks.
```{r}
# Extract the data from the other gt tables
depressed_table_df <- as.data.frame(depressed_table)
trouble_sleeping_table_df <- as.data.frame(trouble_sleeping_table)
social_table_df <- as.data.frame(social_table)

# Ensure the column names match across all tables
colnames(depressed_table_df) <- colnames(combined_df)
colnames(trouble_sleeping_table_df) <- colnames(combined_df)
colnames(social_table_df) <- colnames(combined_df)

# Combine all the tables row by row
combined_all_df <- bind_rows(combined_df, depressed_table_df, trouble_sleeping_table_df, social_table_df)

# Add a row_id column to the data frame
combined_all_df <- combined_all_df %>%
  mutate(row_id = row_number())

# Convert the combined data frame back to a gt table
combined_all_table <- combined_all_df %>%
  gt() %>%
  tab_header(
    title = "Mental Health Factors by SARS-CoV-2 Test Status"
  ) %>%
  # Spanners for COVID Negative and COVID Positive
  tab_spanner(
    label = "Never has tested positive for Covid",
    columns = starts_with("Estimate") | starts_with("CI 95%")
  ) %>%
  tab_spanner(
    label = "Has tested positive for Covid",
    columns = starts_with("Estimate") | starts_with("CI 95%")
  ) %>%
  # Remove the word 'Exercise' from the first row
  cols_label(
    Exercise = ""  # This removes the "Exercise" label
  ) %>%
  # Format the mean values
  fmt_number(
    columns = starts_with("Mean"),
    decimals = 2
  ) %>%
  # Add a footnote
  tab_footnote(
    footnote = "Exercise requirements determined according to American Heart Association. Sleep levels determined by NIH recommendations by age group.",
    locations = cells_column_labels(columns = Exercise)
  ) %>%
  # Add alternating row colors using row_id
  tab_style(
    style = cell_fill(color = "#f5f5f5"),  # Gray color for odd rows
    locations = cells_body(rows = row_id %% 2 == 1)  # Apply to odd rows
  ) %>%
  tab_style(
    style = cell_fill(color = "white"),  # White color for even rows
    locations = cells_body(rows = row_id %% 2 == 0)  # Apply to even rows
  ) %>%
  # Add solid vertical line between row names and Mean_0 columns
  tab_style(
    style = cell_borders(
      sides = c("left"),
      color = "grey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = starts_with("Mean_0")
    )
  ) %>%
  # Add solid vertical line between COVID Negative and COVID Positive columns
  tab_style(
    style = cell_borders(
      sides = c("left"),
      color = "grey",
      weight = px(1)
    ),
    locations = cells_body(
      columns = starts_with("Mean_1")
    )
  ) %>%
  # Hide the row_id column
  cols_hide(columns = "row_id")

# Print the combined gt table
combined_all_table

#footnote:
#"Exercise requirements determined according to American Heart Association. Sleep levels determined by NIH recommendations by age group."

# Save the table as a PNG
here()
gtsave(combined_all_table, here("results", "figures", "result_table1.png"))
```





