---
title: "R Coding Exercise"
---

To start, I'll load packages. As I need packages along the way, I'll return here and add them.
```{r}
library(tidyverse)
library(gt)
library(webshot2)
library(here)
```

Now, loading data using the here package.
```{r}
here() #set working directory
data_original <- readRDS(here("data","raw-data", "NHIS_COVID.rds"))
names(data_original)
```

Selecting variables we need will make the dataset smaller and quicker to work with. Note it is renamed at each step for reproducibility. 
```{r}
data1 <- data_original %>%
  select(STRATA, PSU, PERNUM, SAMPWEIGHT, AGE, PA18AERSTR, HRSLEEP, DEPFREQ, PHQSLEEP, CMPSUPPORT, CVDTESTRSLT)
```


In the following code chunk, exploration and definition of each of these variables will be completed. These definitions and unique values help me to know how to define my binary vairables in the next step. Several of these vairable have codes for unknown, don't know, etc. I will need to convert these to NA.
```{r}
unique(data1$AGE)
unique(data1$PA18AERSTR)
unique(data1$HRSLEEP)
unique(data1$DEPFREQ)
unique(data1$PHQSLEEP)
unique(data1$CMPSUPPORT)
unique(data1$CVDTESTRSLT)
```


We will create binary vairables in a new dataset. For each variable, those who answered NA, 0, 996, 997, 998, 999 will be converted to NA for the remainder of that variable for the continuation of the analysis.
```{r}
unique(data1$CVDTESTRSLT)
data2 <- data1 %>%
  mutate(
    PA18AERSTR = ifelse(PA18AERSTR %in% c(0, 7, 8, 9), NA, PA18AERSTR), #put NA, 0, 6, 7, 8, 9 to NA
    EXERCISE = if_else(PA18AERSTR %in% c(2,3,4), 1, 0, missing = NA_real_) #create EXERCISE vairable, 1 if guidelines by Am Heart Assoc met for aerobics, strength, or both, 0 if not met
    ) %>%
    mutate(
    AGE = ifelse(AGE %in% c(997, 999), NA, AGE),  #invalid ages to NA
    SLEEP = case_when( #Based on age, amount of sleep required from https://www.nhlbi.nih.gov/health/sleep/how-much-sleep#:~:text=Experts%20recommend%20that%20adults%20sleep,or%20more%20hours%20a%20night.
      AGE < 1  ~ if_else(HRSLEEP >= 12 & HRSLEEP <= 16, 1, 0, missing = NA_real_),
      AGE >= 1 & AGE < 3       ~ if_else(HRSLEEP >= 11 & HRSLEEP <= 14, 1, 0, missing = NA_real_),
      AGE >= 3 & AGE < 6       ~ if_else(HRSLEEP >= 10 & HRSLEEP <= 13, 1, 0, missing = NA_real_),
      AGE >= 6 & AGE < 13      ~ if_else(HRSLEEP >= 9 & HRSLEEP <= 12, 1, 0, missing = NA_real_),
      AGE >= 13 & AGE <= 18    ~ if_else(HRSLEEP >= 8 & HRSLEEP <= 10, 1, 0, missing = NA_real_),
      TRUE                     ~ NA_real_  #default NA for unspecified ages
    )) %>%
  mutate(
    DEPRESSED = case_when(
      DEPFREQ %in% c(1, 2) ~ 1, #daily and weekly is considered depressed
      DEPFREQ %in% c(3, 4, 5)    ~ 0, #monthly and a few times a year and never are considered not depressed
      DEPFREQ %in% c(0, 7, 8, 9) ~ NA_real_,#NIU & Unknowns are NA
      TRUE ~ NA_real_ #default NA for unexpected values
    )) %>%
  mutate(
    TROUBLE_SLEEPING = case_when(
      PHQSLEEP %in% c(1, 2, 3) ~ 1, #several days, more than half days, nearly every day are trouble sleeping
      PHQSLEEP == 0            ~ 0,  #not at all is no trouble sleeping
      PHQSLEEP %in% c(6, 7, 8, 9) ~ NA_real_,  #NIU & Unknowns are NA
      TRUE ~ NA_real_  #default NA for unexpected values
    )) %>%
  mutate(
    SOCIAL = case_when(
      CMPSUPPORT == 1 ~ 0,   #more social and emotional support
      CMPSUPPORT == 2 ~ 1,  #less social and emotional support
      CMPSUPPORT == 3 ~ 0,   #about the same
      CMPSUPPORT %in% c(0, 7, 8, 9) ~ NA_real_,  # NIU & Unknowns â†’ NA
      TRUE ~ NA_real_  #default NA for unexpected values
    )) %>%
  mutate(
    COVID = case_when(
      CVDTESTRSLT == 2 ~ 1,  #yes, had COVID
      CVDTESTRSLT == 1 ~ 0,  #no, did not have COVID
      CVDTESTRSLT %in% c(0, 3, 7, 8, 9) ~ NA_real_,  #NIU, did not receive results, unknowns, and NA are NA
      TRUE ~ NA_real_  #default NA for unexpected values
    ))
  
```

Now, I will make plots to explore how these look to ensure there's no problems. I used ChatGPT to help make the table. Each row doesn't add up to 1, this is because the yes/no adds up to 1, and the NA and not NA adds up to 1. Notably, some of these vairables have high NA porportions, but I can't remove them from the set because that would affect the survey design variables, but I will keep it in mind for the rest of the analysis should there be any issues such as singleton strata varibales etc.
```{r}
hist(data2$SLEEP) #histograms of 0 and 1 for each variable
hist(data2$EXERCISE)
hist(data2$DEPRESSED)
hist(data2$TROUBLE_SLEEPING)
hist(data2$SOCIAL)
hist(data2$COVID)

#summarize EXERCISE
summary_exercise <- data2 %>%
  summarise(
    Variable = "EXERCISE",
    Prop_1 = mean(EXERCISE == 1, na.rm = TRUE),
    Prop_0 = mean(EXERCISE == 0, na.rm = TRUE),
    Prop_NA = mean(is.na(EXERCISE))
  )

#summarize SLEEP
summary_sleep <- data2 %>%
  summarise(
    Variable = "SLEEP",
    Prop_1 = mean(SLEEP == 1, na.rm = TRUE),
    Prop_0 = mean(SLEEP == 0, na.rm = TRUE),
    Prop_NA = mean(is.na(SLEEP))
  )

#summarize DEPRESSED
summary_depressed <- data2 %>%
  summarise(
    Variable = "DEPRESSED",
    Prop_1 = mean(DEPRESSED == 1, na.rm = TRUE),
    Prop_0 = mean(DEPRESSED == 0, na.rm = TRUE),
    Prop_NA = mean(is.na(DEPRESSED))
  )

#summarize TROUBLE SLEEPING
summary_trouble_sleeping <- data2 %>%
  summarise(
    Variable = "TROUBLE SLEEPING",
    Prop_1 = mean(TROUBLE_SLEEPING == 1, na.rm = TRUE),
    Prop_0 = mean(TROUBLE_SLEEPING == 0, na.rm = TRUE),
    Prop_NA = mean(is.na(TROUBLE_SLEEPING))
  )

#summarize SOCIAL
summary_social <- data2 %>%
  summarise(
    Variable = "SOCIAL",
    Prop_1 = mean(SOCIAL == 1, na.rm = TRUE),
    Prop_0 = mean(SOCIAL == 0, na.rm = TRUE),
    Prop_NA = mean(is.na(SOCIAL))
  )

#summarize COVID
summary_covid <- data2 %>%
  summarise(
    Variable = "COVID",
    Prop_1 = mean(COVID == 1, na.rm = TRUE),
    Prop_0 = mean(COVID == 0, na.rm = TRUE),
    Prop_NA = mean(is.na(COVID))
  )

#combine all summaries and convert to gt table
summary_table <- bind_rows(
  summary_exercise, 
  summary_sleep, 
  summary_depressed, 
  summary_trouble_sleeping, 
  summary_social, 
  summary_covid
) %>%
  gt() %>%
  tab_header(
    title = "Proportions of 1, 0, and NA for Various Variables"
  )

#print the combined table
summary_table

#save the table as a PNG image
gtsave(summary_table, here("data", "processed-data", "figures", "summary_table.png"))
```

For our final step, we will save this data to the processed_data folder.
```{r}
#save data2 as data3 in the processed-data folder
here()
write_rds(data2, here("data","processed-data", "data3.rds"))
```

