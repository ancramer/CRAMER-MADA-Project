---
title: "Processing Code"
---

To start, I'll load packages. As I need packages along the way, I'll return here and add them.
```{r}
library(tidyverse)
library(gt)
library(webshot2)
library(survey)
library(mice)
library(tableone) #added from part 3 feedback
library(mitools)
library(here)
```

Now, loading data using the here package.
```{r}
here() #set working directory
data_original <- readRDS(here("data","raw-data", "NHIS_COVID.rds"))
data1 <- labelled::remove_val_labels(data_original) #removes labels from haven package which cause problems
```

Let us remove the data prior to 2020 because COVID was not present yet. Survey design variables are by year so it is not a problem to remove this.
```{r}
#filter for years that are not 2019
data1 <- data1 %>%
  filter(YEAR != 2019)

#checking
unique(data1$YEAR)
```
Selecting variables we need will make the dataset smaller and quicker to work with. Note it is renamed at each step for reproducibility. 
```{r}
names(data1) #view names of variables
data1 <- data1 %>%
  select(STRATA, PSU, PERNUM, SAMPWEIGHT, AGE, PA18AERSTR, HRSLEEP, DEPFREQ, PHQSLEEP, CMPSUPPORT, CVDTESTRSLT)
```


In the following code chunk, exploration and definition of each of these variables will be completed. These definitions and unique values help me to know how to define my binary vairables in the next step. Several of these vairable have codes for unknown, don't know, etc. I will need to convert these to NA.
```{r}
unique(data1$AGE)
unique(data1$PA18AERSTR)
unique(data1$HRSLEEP)
unique(data1$DEPFREQ)
unique(data1$PHQSLEEP)
unique(data1$CMPSUPPORT)
unique(data1$CVDTESTRSLT)
```


We will create binary vairables in a new dataset. For each variable, those who answered NA, 0, 996, 997, 998, 999 will be converted to NA for the remainder of that variable for the continuation of the analysis.
```{r}
data2 <- data1 %>%
  mutate(
    PA18AERSTR = ifelse(PA18AERSTR %in% c(0, 7, 8, 9), NA, PA18AERSTR), # put 0, 7, 8, 9 to NA
    EXERCISE = if_else(PA18AERSTR %in% c(2, 3, 4), 1, 0, missing = NA_real_) # 1 if AHA guidelines met, else 0
  ) %>%
  mutate(
    AGE = ifelse(AGE %in% c(997, 999), NA, AGE),  # invalid ages to NA
    SLEEP = case_when( # Based on age, from NHLBI sleep guidelines
      AGE < 1                  ~ if_else(HRSLEEP >= 12 & HRSLEEP <= 16, 1, 0, missing = NA_real_),
      AGE >= 1 & AGE < 3       ~ if_else(HRSLEEP >= 11 & HRSLEEP <= 14, 1, 0, missing = NA_real_),
      AGE >= 3 & AGE < 6       ~ if_else(HRSLEEP >= 10 & HRSLEEP <= 13, 1, 0, missing = NA_real_),
      AGE >= 6 & AGE < 13      ~ if_else(HRSLEEP >= 9 & HRSLEEP <= 12, 1, 0, missing = NA_real_),
      AGE >= 13 & AGE <= 18    ~ if_else(HRSLEEP >= 8 & HRSLEEP <= 10, 1, 0, missing = NA_real_),
      AGE > 18                 ~ if_else(HRSLEEP >= 7 & HRSLEEP <= 9, 1, 0, missing = NA_real_),
      TRUE                     ~ NA_real_  # default NA for unspecified or missing AGE
    )
  ) %>%
  mutate(
    DEPRESSED = case_when(
      DEPFREQ %in% c(1, 2) ~ 1, # daily and weekly → depressed
      DEPFREQ %in% c(3, 4, 5) ~ 0, # monthly or less → not depressed
      DEPFREQ %in% c(0, 7, 8, 9) ~ NA_real_,
      TRUE ~ NA_real_
    )
  ) %>%
  mutate(
    TROUBLE_SLEEPING = case_when(
      PHQSLEEP %in% c(1, 2, 3) ~ 1,  # several days or more → trouble sleeping
      PHQSLEEP == 0            ~ 0,  # not at all
      PHQSLEEP %in% c(6, 7, 8, 9) ~ NA_real_,
      TRUE ~ NA_real_
    )
  ) %>%
  mutate(
    SOCIAL = case_when(
      CMPSUPPORT == 1 ~ 0,  # more support
      CMPSUPPORT == 2 ~ 1,  # less support
      CMPSUPPORT == 3 ~ 0,  # about the same
      CMPSUPPORT %in% c(0, 7, 8, 9) ~ NA_real_,
      TRUE ~ NA_real_
    )
  ) %>%
  mutate(
    COVID = case_when(
      CVDTESTRSLT == 2 ~ 1,  # had COVID
      CVDTESTRSLT == 1 ~ 0,  # did not have COVID
      CVDTESTRSLT %in% c(0, 3, 7, 8, 9) ~ NA_real_,
      TRUE ~ NA_real_
    )
  )
  
```

For our final step, we will save this data to the processed_data folder.
```{r}
#save data2 as data3 in the processed-data folder
here()
write_rds(data2, here("data","processed-data", "data3.rds"))
```

After completed EDA, there's significant missingness in the data. At the recommendation of my peers, I will use multiple imputation, creating 5 sets of imputed data. I re-create the binary variables in each of the 5 imputed datasets, then save to use in the EDA file. 
```{r}
# First, let's set up the imputation
# Create a subset of variables for imputation

imputation_vars <- c("AGE", "PA18AERSTR", "HRSLEEP", "DEPFREQ", 
                     "PHQSLEEP", "CMPSUPPORT", "CVDTESTRSLT", 
                     "STRATA", "PSU", "SAMPWEIGHT")

# Create a subset of your data with just these variables
data_imp <- data1[, imputation_vars]

# Examine the missing data pattern
md.pattern(data_imp)

# Initialize the imputation - including survey design variables in the imputation model
# but not imputing them
imp <- mice(data_imp, maxit = 0)

# Customize the predictor matrix to account for complex survey design
pred <- imp$predictorMatrix
pred[c("STRATA", "PSU", "SAMPWEIGHT"), ] <- 0  # Don't use these as outcomes
pred[, c("STRATA", "PSU", "SAMPWEIGHT")] <- 1  # Use these as predictors

# Customize the method - ensure we don't impute design variables
meth <- imp$method
meth[c("STRATA", "PSU", "SAMPWEIGHT")] <- ""

# Run multiple imputation with 5 imputations (increase m for better estimates)
imp_data <- mice(data_imp, m = 5, predictorMatrix = pred, method = meth, maxit = 5)

# Check convergence
plot(imp_data)

# Get a single completed dataset (for example, the first one)
completed_data1 <- complete(imp_data, 1)

# For analysis with complex survey design
# Create a survey design object with the imputed data
# Repeat for each imputed dataset and pool results

# Get all 5 imputed datasets
imputed_datasets <- lapply(1:5, function(i) complete(imp_data, i))

# Create a function to transform variables into binary using your specific rules
create_binary_vars <- function(df) {
  # Clean AGE and PA18AERSTR
  df$AGE[df$AGE %in% c(997, 999)] <- NA
  df$PA18AERSTR[df$PA18AERSTR %in% c(0, 7, 8, 9)] <- NA
  
  # EXERCISE
  df$EXERCISE <- ifelse(df$PA18AERSTR %in% c(2, 3, 4), 1,
                        ifelse(is.na(df$PA18AERSTR), NA, 0))
  
   # SLEEP
  df$SLEEP <- NA_real_
  df$SLEEP[which(df$AGE < 1)] <- ifelse(df$HRSLEEP[which(df$AGE < 1)] >= 12 &
                                          df$HRSLEEP[which(df$AGE < 1)] <= 16, 1, 0)
  df$SLEEP[which(df$AGE >= 1 & df$AGE < 3)] <- ifelse(df$HRSLEEP[which(df$AGE >= 1 & df$AGE < 3)] >= 11 &
                                                       df$HRSLEEP[which(df$AGE >= 1 & df$AGE < 3)] <= 14, 1, 0)
  df$SLEEP[which(df$AGE >= 3 & df$AGE < 6)] <- ifelse(df$HRSLEEP[which(df$AGE >= 3 & df$AGE < 6)] >= 10 &
                                                       df$HRSLEEP[which(df$AGE >= 3 & df$AGE < 6)] <= 13, 1, 0)
  df$SLEEP[which(df$AGE >= 6 & df$AGE < 13)] <- ifelse(df$HRSLEEP[which(df$AGE >= 6 & df$AGE < 13)] >= 9 &
                                                        df$HRSLEEP[which(df$AGE >= 6 & df$AGE < 13)] <= 12, 1, 0)
  df$SLEEP[which(df$AGE >= 13 & df$AGE <= 18)] <- ifelse(df$HRSLEEP[which(df$AGE >= 13 & df$AGE <= 18)] >= 8 &
                                                           df$HRSLEEP[which(df$AGE >= 13 & df$AGE <= 18)] <= 10, 1, 0)
  df$SLEEP[which(df$AGE > 18)] <- ifelse(df$HRSLEEP[which(df$AGE > 18)] >= 7 &
                                           df$HRSLEEP[which(df$AGE > 18)] <= 9, 1, 0)
  
  # DEPRESSED
  df$DEPRESSED <- NA_real_
  df$DEPRESSED[df$DEPFREQ %in% c(1, 2)] <- 1
  df$DEPRESSED[df$DEPFREQ %in% c(3, 4, 5)] <- 0
  df$DEPRESSED[df$DEPFREQ %in% c(0, 7, 8, 9)] <- NA

  # TROUBLE_SLEEPING
  df$TROUBLE_SLEEPING <- NA_real_
  df$TROUBLE_SLEEPING[df$PHQSLEEP %in% c(1, 2, 3)] <- 1
  df$TROUBLE_SLEEPING[df$PHQSLEEP == 0] <- 0
  df$TROUBLE_SLEEPING[df$PHQSLEEP %in% c(6, 7, 8, 9)] <- NA

  # SOCIAL
  df$SOCIAL <- NA_real_
  df$SOCIAL[df$CMPSUPPORT == 1] <- 0
  df$SOCIAL[df$CMPSUPPORT == 2] <- 1
  df$SOCIAL[df$CMPSUPPORT == 3] <- 0
  df$SOCIAL[df$CMPSUPPORT %in% c(0, 7, 8, 9)] <- NA

  # COVID
  df$COVID <- NA_real_
  df$COVID[df$CVDTESTRSLT == 2] <- 1
  df$COVID[df$CVDTESTRSLT == 1] <- 0
  df$COVID[df$CVDTESTRSLT %in% c(0, 3, 7, 8, 9)] <- NA

  return(df)
}

# Apply transformation to each imputed dataset
binary_imputed_datasets <- lapply(imputed_datasets, create_binary_vars)

glimpse(binary_imputed_datasets)

#save for later
here()
saveRDS(binary_imputed_datasets, file = here("data", "processed-data", "binary_imputed_datasets.rds"))
```
